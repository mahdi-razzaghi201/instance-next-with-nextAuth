import type {
  ApiError,
  ApiResponse,
  UseMutationProps,
} from "@/api/types/api.types";
import { useMutation } from "@tanstack/react-query";
import { {{method}}{{pascalCase name}} } from "./{{method}}-{{kebabCase name}}";
import {} from "./{{method}}-{{kebabCase name}}.schema";
import type {
  {{pascalCase method}}{{pascalCase name}}Request,
  {{pascalCase method}}{{pascalCase name}}ResponseTransformed,
} from "./{{method}}-{{kebabCase name}}.types";

export type Use{{pascalCase method}}{{pascalCase name}}Props = UseMutationProps<
  ApiResponse<{{pascalCase method}}{{pascalCase name}}ResponseTransformed>,
  ApiError,
  {{pascalCase method}}{{pascalCase name}}Request
>;

export const {{method}}{{pascalCase name}}MutationKey = () => ["{{method}}{{pascalCase name}}"];

export const use{{pascalCase method}}{{pascalCase name}} = (props?: Use{{pascalCase method}}{{pascalCase name}}Props) => {
  const mutation = useMutation<
    ApiResponse<{{pascalCase method}}{{pascalCase name}}ResponseTransformed>,
    ApiError,
    {{pascalCase method}}{{pascalCase name}}Request
  >({
    mutationKey: {{method}}{{pascalCase name}}MutationKey(),
    mutationFn: (data) => {{method}}{{pascalCase name}}(data),
    ...props,
  });

  return mutation;
};
